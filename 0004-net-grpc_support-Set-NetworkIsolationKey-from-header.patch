From 22bab34948c133dcb3f958d34df981df20fa477b Mon Sep 17 00:00:00 2001
From: Elliot Huang <elliot.huang@vantiva.com>
Date: Fri, 25 Apr 2025 10:23:13 +0800
Subject: [PATCH] net, grpc_support: Set NetworkIsolationKey from header

If BidirectionalStream request contains a -network-isolation-key
header, it is used to set the network isolation key of the stream.
The header itself is removed and not transmitted.

The header value should be a valid URL with different host and port
for each different network isolation key. Invalid header value is
reported by returning error from bidirectional_stream_start.

Network isolation takes effect only if it is enabled by experimental
option of

  "feature_list": {
    "enable-features": "PartitionConnectionsByNetworkIsolationKey"
  }
---
 .../grpc_support/bidirectional_stream.cc          | 15 ++++++++++++++-
 src/net/http/bidirectional_stream.cc              |  8 ++++++++
 2 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/components/grpc_support/bidirectional_stream.cc b/components/grpc_support/bidirectional_stream.cc
index a2ac5373..5431bae6 100644
--- a/components/grpc_support/bidirectional_stream.cc
+++ b/components/grpc_support/bidirectional_stream.cc
@@ -25,6 +25,7 @@
 #include "net/base/io_buffer.h"
 #include "net/base/net_errors.h"
 #include "net/base/request_priority.h"
+#include "net/base/schemeful_site.h"
 #include "net/http/bidirectional_stream.h"
 #include "net/http/bidirectional_stream_request_info.h"
 #include "net/http/http_network_session.h"
@@ -100,8 +101,20 @@ int BidirectionalStream::Start(const char* url,
   request_info->priority = static_cast<net::RequestPriority>(priority);
   // Http method is a token, just as header name.
   request_info->method = method;
-  if (!net::HttpUtil::IsValidHeaderName(request_info->method))
+  if (!net::HttpUtil::IsValidHeaderName(request_info->method)) {
+    LOG(ERROR) << "Invalid method " << request_info->method;
     return -1;
+  }
+  auto network_isolation_key_header =
+                        headers.GetHeader("-network-isolation-key");
+  if (network_isolation_key_header) {
+    net::SchemefulSite site(GURL{network_isolation_key_header.value()});
+    if (site.opaque()) {
+      LOG(ERROR) << "Invalid -network-isolation-key "
+                 << network_isolation_key_header.value();
+      return -1;
+    }
+  }
   request_info->extra_headers = headers;
   request_info->end_stream_on_headers = end_of_stream;
   write_end_of_stream_ = end_of_stream;
diff --git a/net/http/bidirectional_stream.cc b/net/http/bidirectional_stream.cc
index d16c0bd7..37aba7f8 100644
--- a/net/http/bidirectional_stream.cc
+++ b/net/http/bidirectional_stream.cc
@@ -206,6 +206,14 @@ void BidirectionalStream::StartRequest() {
   HttpRequestInfo http_request_info;
   http_request_info.url = request_info_->url;
   http_request_info.method = request_info_->method;
+  auto network_isolation_key_header =
+      request_info_->extra_headers.GetHeader("-network-isolation-key");
+  if (network_isolation_key_header) {
+    request_info_->extra_headers.RemoveHeader("-network-isolation-key");
+    net::SchemefulSite site(GURL{network_isolation_key_header.value()});
+    CHECK(!site.opaque());
+    http_request_info.network_isolation_key = NetworkIsolationKey(site, site);
+  }
   http_request_info.extra_headers = request_info_->extra_headers;
   http_request_info.socket_tag = request_info_->socket_tag;
   stream_request_ =
-- 
2.49.0

